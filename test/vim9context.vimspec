let g:assert = themis#helper('assert')
let g:scope = themis#helper('scope')
let g:funcs = g:scope.funcs('autoload/vim9context.vim')
call themis#helper('command').with(g:assert)
call themis#func_alias(g:funcs)
let g:context = g:funcs.get_context_variables()

Describe s:find_innermost_braces_block()
  Before each
    % delete _
  End

  It finds the innermost braces block.
    let lines =<< END
      statements...
      command! GreatCommand {
      }
END
    call setline(1, lines)
    normal! 3G^
    Assert Equals(g:funcs.find_innermost_braces_block(), 2)

    normal! 2G^
    Assert Equals(g:funcs.find_innermost_braces_block(), 2)

    normal! 1G
    Assert Equals(g:funcs.find_innermost_braces_block(), 0)
  End

  It finds the innermost braces block with dictionary declarations in it.
    let lines =<< END
      command! GreatCommand {
        var d = {
          key: 'value'
        }
      }
END
    call setline(1, lines)
    normal! 5G$
    Assert Equals(g:funcs.find_innermost_braces_block(), 1)
  End

  It finds the innermost braces block when braces block is not completed.
    let lines =<< END
      command! GreatCommand {
        implementation...
END
    call setline(1, lines)
    normal! 2G
    Assert Equals(g:funcs.find_innermost_braces_block(), 1)
  End

  It finds the innermost braces block when braces block is not completed and dictionary in it.
    let lines =<< END
      command! GreatCommand {
        var d = {
          key: 'value'
        }
        following implementation...
END
    call setline(1, lines)
    normal! 5G^
    Assert Equals(g:funcs.find_innermost_braces_block(), 1)
  End

  It doesn't finds any blocks
    call setline(1, 'statement...')
    Assert Equals(g:funcs.find_innermost_braces_block(), 0)
  End
End

Describe s:find_innermost_legacy_function()
  Before each
    % delete _
  End

  It finds the innermost legacy function.
    let lines =<< END
      function! Fn()
        statements...
      endfunction
END
    call setline(1, lines)
    normal! 1G^
    Assert Equals(g:funcs.find_innermost_legacy_function(), 1)
    normal! 2G^
    Assert Equals(g:funcs.find_innermost_legacy_function(), 1)
    normal! 3G^
    Assert Equals(g:funcs.find_innermost_legacy_function(), 1)
  End

  It doesn't finds legacy function block.
    let lines =<< END
      function! Fn()
        statements...
      endfunction
      statements...
END
      call setline(1, lines)
      normal! G
      Assert Equals(g:funcs.find_innermost_legacy_function(), 0)
  End
End

Describe s:find_innermost_def_function()
  Before each
    % delete _
  End

  It finds the innermost def function.
    let lines =<< END
      def Fn()
        statements...
      enddef
END
    call setline(1, lines)
    normal! 1G^
    Assert Equals(g:funcs.find_innermost_def_function(), 1)
    normal! 2G^
    Assert Equals(g:funcs.find_innermost_def_function(), 1)
    normal! 3G^
    Assert Equals(g:funcs.find_innermost_def_function(), 1)
  End

  It handles nested functions.
    let lines =<< END
      def! Outer()
        def! Inner()
        enddef
        statement...
      enddef
      statement...
END
    call setline(1, lines)
    normal! 3G^
    Assert Equals(g:funcs.find_innermost_def_function(), 2)
    normal! 4G
    Assert Equals(g:funcs.find_innermost_def_function(), 1)
    normal! G
    Assert Equals(g:funcs.find_innermost_def_function(), 0)
  End

  It doesn't finds def function block.
    let lines =<< END
      def! Fn()
        statements...
      enddef
      statements...
END
      call setline(1, lines)
      normal! G
      Assert Equals(g:funcs.find_innermost_def_function(), 0)
  End
End

Describe s:is_vim9script_block()
  Before each
    % delete _
  End

  It judges if it's vim9script block or not.
  End
End

Describe s:determine_context_by_line()
  Before each
    % delete _
  End

  It determines the context is vim9script when using :vim9cmd modifier.
    call setline(1, 'vim9cmd var TestVar: string')
    Assert Equals(g:funcs.determine_context_by_line(1), g:context.vim9_script)
  End

  It determines the context is vimscript when using :legacy modifier.
    call setline(1, 'legacy let s:test_var = ""')
    Assert Equals(g:funcs.determine_context_by_line(1), g:context.vim_script)
  End

  It determines the context is vim9script when the line is :legacy def.
    call setline(1, 'legacy def Testfunc()')
    Assert Equals(g:funcs.determine_context_by_line(1), g:context.vim9_script)
  End

  It determines the context is vim9script when multiple modifier is specified.
    call setline(1, 'vim9cmd legacy vim9cmd var Testvar: string')
    Assert Equals(g:funcs.determine_context_by_line(1), g:context.vim9_script)
  End

  It determines the context is vimscript when multiple modifier is specified.
    call setline(1, 'vim9cmd legacy vim9cmd legacy let s:test_var = ""')
    Assert Equals(g:funcs.determine_context_by_line(1), g:context.vim_script)
  End

  It ignores 'export' modifier.
    call setline(1, 'export def TestFunc()')
    Assert Equals(g:funcs.determine_context_by_line(1), g:context.vim9_script)
  End

  It doesn't determine context when the context is unclear.
    call setline(1, "let test_var = 'legacy'")
    Assert Equals(g:funcs.determine_context_by_line(1), g:context.unknown)
    call setline(1, "echo 'vim9cmd'")
    Assert Equals(g:funcs.determine_context_by_line(1), g:context.unknown)
    call setline(1, '%s/legacy/vim9cmd/g')
    Assert Equals(g:funcs.determine_context_by_line(1), g:context.unknown)
  End
End

Describe s:determine_context_by_blocks()
  Before each
    % delete _
  End

  It determines the context is vimscript when in legacy function.
    let lines =<< END
      function TestFunc()
        let l:test_var = 'testvar'
      endfunction
END
    call setline(1, lines)
    Assert Equals(g:funcs.determine_context_by_blocks(1), g:context.vim_script)
    Assert Equals(g:funcs.determine_context_by_blocks(2), g:context.vim_script)
    Assert Equals(g:funcs.determine_context_by_blocks(3), g:context.vim_script)
  End

  It determines the context is vim9script when in def function with :legacy modifier.
    let lines =<< END
      legacy def TestFunc()
        var TestVar: string
      enddef
END
    call setline(1, lines)
    Assert Equals(g:funcs.determine_context_by_blocks(1), g:context.vim9_script)
    Assert Equals(g:funcs.determine_context_by_blocks(2), g:context.vim9_script)
    Assert Equals(g:funcs.determine_context_by_blocks(3), g:context.vim9_script)
  End

  It determines the context is vim9script when in def function.
    let lines =<< END
      def TestFunc()
        var TestVar: string
      enddef
END
    call setline(1, lines)
    Assert Equals(g:funcs.determine_context_by_blocks(2), g:context.vim9_script)
    Assert Equals(g:funcs.determine_context_by_blocks(1), g:context.vim9_script)
  End

  It determines the context in legacy function with some blocks in it.
    let lines =<< END
      function! TestFunc() abort
        let l:test_var = {
        \ 'key': 'val'
        \}
        def DefFunc()
        enddef
        command! GreatCommand {
          Here is vim9script block...
        }
        autocmd VimEnter * {
          Here is vim9script block too...
        }
      endfunction
END
    call setline(1, lines)
    Assert Equals(g:funcs.determine_context_by_blocks(1), g:context.vim_script)
    Assert Equals(g:funcs.determine_context_by_blocks(2), g:context.vim_script)
    Assert Equals(g:funcs.determine_context_by_blocks(3), g:context.vim_script)
    Assert Equals(g:funcs.determine_context_by_blocks(5), g:context.vim9_script)
    Assert Equals(g:funcs.determine_context_by_blocks(7), g:context.vim9_script)
    Assert Equals(g:funcs.determine_context_by_blocks(11), g:context.vim9_script)
    Assert Equals(g:funcs.determine_context_by_blocks(31), g:context.vim_script)
  End
  It determines the context is vim9script when in vim9block in legacy function.
    let lines =<< END
      function! Outer()
        command! SuperCommand {
          statements...
        }
      endfunction
END
    call setline(1, lines)
    Assert Equals(g:funcs.determine_context_by_blocks(3), g:context.vim9_script)
  End

  It doesn't determine context when the context is unclear.
    let lines =<< END
      function! Legacy()
      endfunction

      statement...

      def! Def()
      enddef

      statement...
END
    Assert Equals(g:funcs.determine_context_by_blocks(4), g:context.unknown)
    Assert Equals(g:funcs.determine_context_by_blocks(8), g:context.unknown)
  End
End

Describe s:determine_context_by_file()
  Before each
    % delete _
  End

  It determines the context is vim9script.
    let lines =<< END
      vim9script

      var TestVar: string
END
    call setline(1, lines)
    Assert Equals(g:funcs.determine_context_by_file(), g:context.vim9_script)
  End

  It determines the context is vim9script even when there's a if statement on the top.
    let lines =<< END
      if !has('vim9script')
        finish
      endif
      vim9script

      var TestVar: string
END
    call setline(1, lines)
    Assert Equals(g:funcs.determine_context_by_file(), g:context.vim9_script)
  End

  It determines the context is vimscript.
    let lines =<< END
      echo 'vim9script'
      let d = {
      \'vim9script': 'vim9script',
      \}
END
    call setline(1, lines)
    Assert Equals(g:funcs.determine_context_by_file(), g:context.vim_script)
  End
End

Describe vim9context#is_vim9context_pos()
  Before each
    % delete _
  End

  Context in vim9script file
    It determines the context.
      let lines =<< END
        vim9script

        echo 'vim9script'
        function Legacy() abort
          echo 'vimscript'
          command! ComInner {
            echo 'vim9script'
          }
          autocmd Event * {
            echo 'vim9script'
          }
        endfunction
        export def Def()
          echo 'vim9script'
        enddef
        legacy echo 'vimscript'
END
      call setline(1, lines)
      Assert Equals(vim9context#is_vim9context_pos(1), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(3), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(5), g:context.vim_script)
      Assert Equals(vim9context#is_vim9context_pos(6), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(7), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(9), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(10), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(14), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(16), g:context.vim_script)
    End
  End

  Context in vimscript file
    It determines the context.
      let lines =<< END
        echo 'vimscript'
        command! Com {
          echo 'vim9script'
        }
        autocmd Event * {
          echo 'vim9script'
        }
        function! Legacy() abort
          echo 'vimscript'
          command! ComInner {
            echo 'vim9script'
          }
          autocmd Event * {
            echo 'vim9script'
          }
        endfunction
        def! Def()
          echo 'vim9script'
        enddef
        vim9cmd echo 'vim9script'
END
      call setline(1, lines)
      Assert Equals(vim9context#is_vim9context_pos(1), g:context.vim_script)
      Assert Equals(vim9context#is_vim9context_pos(3), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(6), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(9), g:context.vim_script)
      Assert Equals(vim9context#is_vim9context_pos(10), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(11), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(13), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(14), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(18), g:context.vim9_script)
      Assert Equals(vim9context#is_vim9context_pos(20), g:context.vim9_script)
    End
  End
End
